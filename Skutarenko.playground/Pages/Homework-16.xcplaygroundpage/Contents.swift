//—Å–æ–∑–¥–∞–µ–º —Ç–∏–ø –∫–æ–º–Ω–∞—Ç–∞(–µ—Å—Ç—å –¥–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞)
//—Å–æ–∑–¥–∞–µ–º —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂  —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
//—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–µ–π
//–¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
//–Ω–µ –º–æ–∂–µ–º –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã
//—Å–æ–∑–¥–∞—Ç—å —è—â–∏–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ö –∏ —É –∏ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã
//–ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–≥ –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ —è—â–∏–∫–∞ –∏ –¥–≤–∏–≥–∞—Ç—å –µ–≥–æ
//–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å (—Ç–æ—á–∫—É –∫—É–¥–∞ –¥–æ—Ç–∞—â–∏—Ç—å)
//—Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —è—â–∏–∫–æ–≤ –º–æ–∂–Ω–æ

struct Coordinate: Equatable {
    static let minCoordinate = 0
    static let maxCoordinate = 7
    
    var x: Int {
        willSet {
            if newValue < Coordinate.minCoordinate {
                self.x = Coordinate.minCoordinate
            } else if newValue > Coordinate.maxCoordinate {
                self.x = Coordinate.maxCoordinate
            }
        }
    }
    
    var y: Int {
        willSet {
            if newValue < Coordinate.minCoordinate {
                self.y = Coordinate.minCoordinate
            } else if newValue > Coordinate.maxCoordinate {
                self.y = Coordinate.maxCoordinate
            }
        }
    }
    
    static func == (lhs: Coordinate, rhs: Coordinate) -> Bool {
        return lhs.x == rhs.x && lhs.y == rhs.y
    }
}

enum Name: String {
    case character = "üßë"
    case box = "üì¶"
    case square = "‚¨ú"
    case destination = "‚ùå"
    case courier = "üöö"
    case gameOver = "‚ù§Ô∏è"
}

enum Direction {
    case left
    case right
    case up
    case down
}

struct Cell {
    var name: Name
    var coordinate: Coordinate
}

class Board {
    var cells: [Cell] = []
    
    init() {
        createBoard()
    }
    
    func createBoard() {
        for i in 0...7 {
            for j in 0...7 {
                cells.append(
                    Cell(
                        name: .square,
                        coordinate: Coordinate(x: j+1, y: i+1)
                    )
                )
            }
        }
    }
    
    func show() {
        var output = ""
        
        for (index, cell) in cells.enumerated() {
            output.append(cell.name.rawValue)
            
            // –ù–æ–≤–∞—è –ª–∏–Ω–∏—è
            if (index + 1) % 8 == 0 {
                output += "\n"
            }
        }
        
        output += "-----------------"
        print(output)
    }
    
    func findCharacterOrCourierIndex() -> Int {
        var index = 0
        for (i, cell) in cells.enumerated() {
            if cell.name == .character || cell.name == .courier {
                index = i
            }
        }
        return index
    }
    
    func findIndex(by coordinate: Coordinate) -> Int {
        var index = 0
        for (i, cell) in cells.enumerated() {
            if cell.coordinate == coordinate {
                index = i
            }
        }
        return index
    }
    
    func create(_ name: Name, by coordinate: Coordinate) {
        let i = findIndex(by: coordinate)
        if cells[i].name == .square {
            cells[i].name = name
        } else {
            print("Choose new cell")
        }
    }
    
    func move(directions: [Direction]) {
        for direction in directions {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞
            let currentIndex = findCharacterOrCourierIndex()
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–ª–∏ –∫—É—Ä—å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–µ
            var currentName = cells[currentIndex].name
            var nextCoordinate = cells[currentIndex].coordinate
            switch direction {
            case .left:
                nextCoordinate.x -= 1
            case .right:
                nextCoordinate.x += 1
            case .up:
                nextCoordinate.y -= 1
            case .down:
                nextCoordinate.y += 1
            }
            // –ù–∞ —Å—Ç–∞—Ä–æ–π –∫–ª–µ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç
            cells[currentIndex].name = .square
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
            if cells[findIndex(by: nextCoordinate)].name == .destination {
                gameOver()
            }
            // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ—Ä–æ–±–∫–∏, —Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—É—Ä—å–µ—Ä–æ–º
            if cells[findIndex(by: nextCoordinate)].name == .box {
                currentName = .courier
            }
            // –ò–∑–º–µ–Ω—è–µ–º –∏–º—è –∫–ª–µ—Ç–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞
            cells[findIndex(by: nextCoordinate)].name = currentName
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
            show()
        }
    }
    
    func gameOver() {
        for i in 0...cells.count - 1 {
            if cells[i].name == .square {
                cells[i].name = .gameOver
            }
        }
        print("    GAME OVER")
    }
}


// MARK: DEMO

var board = Board()
board.create(.character, by: Coordinate(x: 4, y: 3))
board.create(.box, by: Coordinate(x: 2, y: 5))
board.create(.destination, by: Coordinate(x: 3, y: 7))

board.show()

board.move(directions: [.left, .left, .down, .down])
board.move(directions: [.right, .down, .down])


